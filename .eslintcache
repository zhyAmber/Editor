[{"D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\index.js":"1","D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\App.js":"2","D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\reportWebVitals.js":"3","D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\components\\Button.jsx":"4","D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\pages\\Editor.jsx":"5","D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\components\\input.jsx":"6","D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\api\\index.js":"7","D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\api\\ajax.js":"8","D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\utils\\storageUtils.js":"9","D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\hooks\\useLocalStorage.js":"10"},{"size":547,"mtime":1679501959486,"results":"11","hashOfConfig":"12"},{"size":4711,"mtime":1679746545032,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1679501959491,"results":"14","hashOfConfig":"12"},{"size":388,"mtime":1679501959481,"results":"15","hashOfConfig":"12"},{"size":12420,"mtime":1679744343270,"results":"16","hashOfConfig":"12"},{"size":2950,"mtime":1679744095493,"results":"17","hashOfConfig":"12"},{"size":3469,"mtime":1679675613840,"results":"18","hashOfConfig":"12"},{"size":1033,"mtime":1679743988571,"results":"19","hashOfConfig":"12"},{"size":1530,"mtime":1679501959494,"results":"20","hashOfConfig":"12"},{"size":623,"mtime":1679501959485,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1nz5yeu",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\index.js",[],["45","46"],"D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\App.js",["47","48","49","50"],"D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\reportWebVitals.js",[],"D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\components\\Button.jsx",[],"D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\pages\\Editor.jsx",["51","52"],"import React, { useEffect, useState } from 'react';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\"\r\nimport 'codemirror/lib/codemirror.css';\r\n\r\nimport 'codemirror/mode/xml/xml';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport 'codemirror/mode/css/css';\r\nimport \"codemirror/mode/python/python.js\";\r\n\r\n\r\nimport 'codemirror/theme/dracula.css';\r\nimport 'codemirror/theme/material.css';\r\nimport 'codemirror/theme/mdn-like.css';\r\nimport 'codemirror/theme/the-matrix.css';\r\nimport 'codemirror/theme/night.css';\r\n\r\n//搜索和跳转功能\r\nimport 'codemirror/addon/search/match-highlighter.js'\r\nimport 'codemirror/addon/search/jump-to-line.js'\r\n\r\nimport 'codemirror/addon/dialog/dialog.js'\r\nimport 'codemirror/addon/dialog/dialog.css'\r\nimport 'codemirror/addon/search/searchcursor.js'\r\nimport 'codemirror/addon/search/search.js'\r\n\r\n//代码高亮\r\nimport 'codemirror/addon/selection/active-line';\r\nimport { Controlled as ControlledEditorComponent } from 'react-codemirror2';\r\nimport { message, Form, Button, Layout, Tree, Row, Col, Input, Tabs, List, Radio } from 'antd';\r\nimport { reqcontent, getFile, pushcontent, pullcontent } from '../api';\r\nimport InputDemo, { getJsonToTree } from '../components/input';\r\n\r\n\r\nconst { DirectoryTree } = Tree;\r\n\r\nconst getInitialTree = () => {\r\n  // 从localstorage获取文件树json，使用时包裹【】\r\n  let Storagedata = JSON.parse(localStorage.getItem('result.data: '))\r\n  if (Storagedata) {\r\n    const foldertreejson = getJsonToTree(Storagedata.foldertree)\r\n    return foldertreejson\r\n  }\r\n  return {}\r\n}\r\n\r\nconst Editor = ({ language, value, setEditorState }) => {\r\n  const [submitinfo, setSubmitinfo] = useLocalStorage(\"selectitem\", null);\r\n  const [theme, setTheme] = useState('dracula');\r\n  const [cloneName, setCloneName] = useLocalStorage(\"lastposiname\", \"\");\r\n  const [treeData, setTreeData] = useState(getInitialTree());\r\n  const [cursor, setCursor] = useState({ line: 0, ch: 0 })\r\n  const [key, setKey] = useState(1)\r\n  const [commitmsg, setCommitmsg] = useState(\"chore: Commit by Editor\")\r\n  const [viewmode, setViewmode] = useState(\"code\") // 'code' or 'commit'\r\n  // commit历史信息\r\n  const [commithistory, setCommithistory] = useLocalStorage(\"commithis\", false)\r\n  const themeArray = ['dracula', 'material', 'mdn-like', 'the-matrix', 'night'];\r\n  const handleChange = (editor, data, value) => {\r\n    setEditorState(value);\r\n    localStorage.setItem('content', value)\r\n    // localStorage.setItem('content',JSON.stringify(value))\r\n  };\r\n\r\n  useEffect(() => {\r\n    const codemirrorDom = document.getElementsByClassName('CodeMirror')[0]\r\n    codemirrorDom.setAttribute(\"style\", \"height: 100%\")\r\n  }, [])\r\n\r\n  window.onIframeCallback = function ({ index, tagName }) {\r\n    document.getElementById('iframe').blur()\r\n    const htmlstr = value\r\n    let arr = htmlstr.split('<' + tagName)\r\n    arr = arr.slice(0, index)\r\n    const frontStr = arr.join('<' + tagName)\r\n    let line = 0\r\n    if (frontStr.length > 0) {\r\n      line = frontStr.match(/\\n/g).length //行数\r\n    }\r\n\r\n    console.log(line)\r\n    const ch = frontStr.split('\\n').reverse()[0].length\r\n    console.log(ch)\r\n\r\n    setCursor({\r\n      line,\r\n      ch,\r\n      sticky: 'before'\r\n    })\r\n    setKey(key + 1)\r\n  }\r\n\r\n  //获取上传文件\r\n  // const openFile = event => {\r\n  //   var input = event.target;\r\n  //   var reader = new FileReader();\r\n  //   reader.onload = function () {\r\n  //     if (reader.result) {\r\n  //       //显示文件内容\r\n  //       //console.log(reader.result);\r\n  //       value = reader.result;\r\n  //       handleChange(this.editor, this.data, value);\r\n  //     }\r\n  //   };\r\n  //   reader.readAsText(input.files[0]);\r\n  // };\r\n\r\n\r\n  //submit commit编辑框内容\r\n  const onFinish = async () => {\r\n    console.log('传给后端的编辑框数据content: ', value);\r\n    console.log('传给后端的编辑框数据reponame: ', cloneName);\r\n    console.log('传给后端的编辑框数据rel_path: ', submitinfo);\r\n    message.destroy()\r\n    message.loading(\"send commit request\")\r\n    reqcontent({\r\n      file_content: value,\r\n      file_rel_path: submitinfo,\r\n      reponame: cloneName,\r\n      commit_message: commitmsg\r\n    }).then(res => {\r\n      if (res.status === 200) {\r\n        message.destroy()\r\n        message.success(\"success commit\")\r\n      }\r\n      console.log('result :', res.data)\r\n    })\r\n    // let result = await reqcontent(value);\r\n    // console.log('result: ', result);\r\n    // if (result.status === 200) {\r\n    //   message.success('编辑框内容发送成功');\r\n    //   console.log('finish');\r\n    // } else {\r\n    //   message.error('编辑框发送出了一点问题');\r\n    // }\r\n  };\r\n\r\n  //Push到git仓库\r\n  const onPush = async () => {\r\n    console.log('传给后端的编辑框数据reponame: ', cloneName);\r\n    message.destroy()\r\n    message.loading(\"send push request\")\r\n    pushcontent({\r\n      reponame: cloneName\r\n    }).then(res => {\r\n      if (res.status === 200) {\r\n        message.destroy()\r\n        message.success(\"successful push\")\r\n      }\r\n      console.log('result :', res.data)\r\n    })\r\n    // let result = await reqcontent(value);\r\n    // console.log('result: ', result);\r\n    // if (result.status === 200) {\r\n    //   message.success('编辑框内容发送成功');\r\n    //   console.log('finish');\r\n    // } else {\r\n    //   message.error('编辑框发送出了一点问题');\r\n    // }\r\n  };\r\n  const onPull = async () => {\r\n    console.log('传给后端的编辑框数据reponame: ', cloneName);\r\n    message.destroy()\r\n    message.loading(\"send pull request\")\r\n    pullcontent({\r\n      reponame: cloneName\r\n    }).then(res => {\r\n      if (res.status === 200) {\r\n        message.destroy()\r\n        message.success(\"successful pull\")\r\n      }\r\n      console.log('result :', res.data)\r\n    })\r\n    // let result = await reqcontent(value);\r\n    // console.log('result: ', result);\r\n    // if (result.status === 200) {\r\n    //   message.success('编辑框内容发送成功');\r\n    //   console.log('finish');\r\n    // } else {\r\n    //   message.error('编辑框发送出了一点问题');\r\n    // }\r\n  };\r\n\r\n\r\n  const onSelect = (keys, info) => {\r\n    console.log('infoinfo', info)\r\n    console.log('Trigger Select', keys);\r\n    console.log('info', info.node.key);\r\n    setSubmitinfo(info.node.key);\r\n    //localStorage.setItem('result.data: ', JSON.stringify(info.node))\r\n    //console.log(\"submit\",submitinfo)\r\n    getFile({\r\n      file_rel_path: info.node.key,\r\n      reponame: cloneName\r\n    }).then(res => {\r\n      if (info.node.title.includes('html')) {\r\n        res && setEditorState(res.data)\r\n      }\r\n      if (info.node.title.includes('json')) {\r\n        res && setEditorState(JSON.stringify(res.data))\r\n      }\r\n      else {\r\n        res && setEditorState(JSON.parse(JSON.stringify(res.data)))\r\n      }\r\n      // if(info.node.title.includes('json')){\r\n      //   res&& setEditorState(JSON.stringify(res.data))\r\n      // }\r\n      // else{\r\n      // res&& setEditorState(res.data)\r\n      // }\r\n    })\r\n\r\n  };\r\n\r\n\r\n  const getTreeData = (name, data) => {\r\n    setCloneName(name)\r\n    setTreeData(data)\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div style={{ textAlign: 'center', fontSize:20 }}>\r\n        <h1>AIDevOps</h1>\r\n      </div>\r\n\r\n      <Form>\r\n        <div style={{textAlign:'center'}}>\r\n        <InputDemo getTreeData={getTreeData} setCommitHis={setCommithistory} />\r\n        </div>\r\n      </Form>\r\n      <br />\r\n      <Row>\r\n        <div style={{margin:'0 auto'}}>\r\n        <Radio.Group \r\n        value={viewmode} \r\n        size={'large'}\r\n        onChange={(e) => {\r\n          setViewmode(e.target.value)\r\n        }}>\r\n          <Radio.Button value=\"code\">Codes</Radio.Button>\r\n          <Radio.Button value=\"commit\">Commits</Radio.Button>\r\n        </Radio.Group>\r\n        </div>\r\n      </Row>\r\n      {viewmode === \"code\" ? (\r\n        <Row>\r\n          <Col span={6}>\r\n            <DirectoryTree\r\n              defaultExpandedKeys={submitinfo ? [submitinfo] : []}\r\n              defaultSelectedKeys={submitinfo ? [submitinfo] : []}\r\n              blockNode={true}\r\n              onSelect={onSelect}\r\n              treeData={[treeData]}\r\n            />\r\n          </Col>\r\n          <Col span={18}>\r\n            <Form>\r\n              <Form.Item name=\"content\">\r\n                <div>\r\n                  {/* 上传文件\r\n                <div>\r\n                  <input\r\n                    type=\"file\"\r\n                    id=\"testJsonFile\"\r\n                    onChange={event => {\r\n                      openFile(event);\r\n                    }}\r\n                  ></input>\r\n                </div> */}\r\n\r\n                  <div style={{ marginBottom: '10px' }}>\r\n                    <label htmlFor=\"cars\">choose Style: </label>\r\n                    <select\r\n                      name=\"theme\"\r\n                      onChange={el => {\r\n                        setTheme(el.target.value);\r\n                      }}\r\n                    >\r\n                      {themeArray.map(theme => (\r\n                        <option value={theme}>{theme}</option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n\r\n\r\n                </div>\r\n\r\n                <div className='editor-container'>\r\n                  {/* 代码编辑框和显示 */}\r\n                  <ControlledEditorComponent\r\n                    key={key}\r\n                    cursor={cursor}\r\n                    onCursor={(editor, data) => {\r\n                      console.log(data)\r\n                      setCursor(data)\r\n                    }}\r\n                    onBeforeChange={handleChange}\r\n                    value={value}\r\n                    autoScroll=\"true\"\r\n                    //className=\"code-mirror-wrapper\"\r\n                    options={{\r\n                      lineWrapping: true, // 代码自动换行\r\n                      lint: true,\r\n                      mode: language,// 语言\r\n                      lineNumbers: true, // 显示行号,\r\n                      theme: theme,//主题\r\n                      autoCloseTags: true,\r\n                      autoCloseBrackets: true,//标签自动闭合\r\n                      autofocus: true, // 自动获取焦点\r\n                      focus: true,\r\n                      styleActiveLine: true, // 光标代码高亮\r\n                      styleActiveSelected: true,\r\n                      showCursorWhenSelecting: true\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Form.Item>\r\n\r\n              <Form.Item>\r\n                <Button type=\"primary\" onClick={onPull}>\r\n                  Pull\r\n                </Button>\r\n              </Form.Item>\r\n\r\n              <Form.Item>\r\n                <Row>\r\n                  <Col>\r\n                    <Input\r\n                      value={commitmsg}\r\n                      onChange={(e) => {\r\n                        e.persist()\r\n                        setCommitmsg(e.target.value)\r\n                      }} />\r\n                  </Col>\r\n                  <Col>\r\n                    <Button type=\"primary\" onClick={onFinish}>\r\n                      Save & Submit\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </Form.Item>\r\n\r\n              <Form.Item>\r\n                <Button type=\"primary\" onClick={onPush}>\r\n                  Push\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n\r\n\r\n          </Col>\r\n\r\n        </Row>\r\n      ) : (\r\n        <CommitTab commithistory={commithistory} />\r\n      )}\r\n\r\n    </Layout>\r\n  );\r\n};\r\nexport default Editor;\r\n\r\n\r\n/**\r\n * 包含历史commit信息\r\n */\r\nconst CommitTab = ({ commithistory }) => {\r\n  return (\r\n    <div style={{ maxHeight: '700px', overflow: 'auto', paddingLeft: '30px' }}>{commithistory ? <List\r\n      itemLayout=\"horizontal\"\r\n      dataSource={commithistory}\r\n      renderItem={(item, index) => (\r\n        <List.Item>\r\n          <List.Item.Meta\r\n            title={<a \r\n              style={{fontSize:'16px'}}\r\n              onClick={() => {\r\n              message.destroy()\r\n              message.warn(\"点击标题check out还没写完\")\r\n            }\r\n            }>\r\n              {item.title}\r\n            </a>}\r\n            description={item.time}\r\n          />\r\n          {item.name}\r\n          <br />\r\n          {item.hash}\r\n        </List.Item>\r\n      )}\r\n    /> : \"no history commits\"}</div>\r\n  )\r\n}","D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\components\\input.jsx",["53"],"import React,{useState} from 'react';\r\nimport { message, Input, Button } from 'antd';\r\nimport { reqInput } from '../api';\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\n\r\nexport const getJsonToTree = (data) => {\r\n  // 此处返回json结构\r\n  // 在DirectoryTree使用时加【】\r\n  let obj = {\r\n    title: data.name,\r\n    key: data.rel_path\r\n  }\r\n  // console.log(data, 'data');\r\n\r\n  if (data.type === \"folder\") {\r\n    obj['children'] = []\r\n    data.folders.forEach(i => {\r\n      obj.children.push(getJsonToTree(i))\r\n    })\r\n    data.files.forEach(i => {\r\n      obj.children.push(getJsonToTree(i))\r\n    })\r\n  }\r\n  if (obj.children && obj.children.length === 0) {\r\n    delete obj.children\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\nconst InputDemo = (props) => {\r\n  const [InputValue, setInputValue] = useLocalStorage(\"clonedir\", \"git@github.com:zhyAmber/FYP.git\")\r\n  const [content, setContent] = useState(\"\")\r\n\r\n  const handleGetInputValue = (event) => {\r\n    setInputValue(event.target.value)\r\n    //let Storagedata=JSON.parse(this.localStorage.getItem('result.data: '))\r\n    //  console.log(\"Storagedata\",Storagedata)\r\n    // this.props.getTreeData(Storagedata.reponame,this.getData([Storagedata.foldertree]))\r\n  };\r\n\r\n\r\n  const getData = (data) => {\r\n    return getJsonToTree(data)\r\n  }\r\n\r\n  const InputSubmit = async () => {\r\n    console.log('传给后端的输入框数据value: ', InputValue);\r\n    message.destroy()\r\n    message.loading(\"Send Clone Request\")\r\n    let result = await reqInput(InputValue);\r\n    console.log('result: ', result);\r\n    console.log('result.data: ', result.data)\r\n    //let Storagedata=this.state.Storagedata\r\n    //let Storagedata=JSON.parse(localStorage.getItem('result.data: '))\r\n    // console.log('Storagedata',Storagedata)\r\n    if (result.status === 200) {\r\n      message.destroy()\r\n      message.success(\"Sucessful Clone\")\r\n      localStorage.setItem('result.data: ', JSON.stringify(result.data))\r\n      const foldertreejson = getData(result.data.foldertree)\r\n      console.log(\"文档树结构2\", foldertreejson)\r\n      props.getTreeData(result.data.reponame, foldertreejson)\r\n\r\n      // localStorage.setItem('result.data: ', JSON.stringify(result.data))\r\n      //this.props.getTreeData(Storagedata.reponame,this.getData(Storagedata.foldertree))\r\n      setContent(result.data.foldertree.files)\r\n      props.setCommitHis(result.data.logs)\r\n    } else {\r\n      message.destroy()\r\n      message.error('Error when clone');\r\n    }\r\n    //console.log('localstorage',localStorage)\r\n  };\r\n\r\n\r\n  return (\r\n    <div >\r\n      <Input\r\n        style={{ width: \"50%\" }}\r\n        value={InputValue}\r\n        onChange={handleGetInputValue}\r\n      />\r\n      <Button type=\"primary\" onClick={InputSubmit}>Clone</Button>\r\n\r\n      {/* <div>\r\n          <input\r\n          value={this.state.content}\r\n          onChange={this.handleGetInputValue}\r\n        />\r\n        </div> */}\r\n\r\n\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default InputDemo;","D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\api\\index.js",[],"D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\api\\ajax.js",[],"D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\utils\\storageUtils.js",[],"D:\\文档\\大四上\\FYP\\Git交互项目\\Editor\\src\\hooks\\useLocalStorage.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":3,"column":8,"nodeType":"60","messageId":"61","endLine":3,"endColumn":14},{"ruleId":"58","severity":1,"message":"62","line":45,"column":9,"nodeType":"60","messageId":"61","endLine":45,"endColumn":19},{"ruleId":"58","severity":1,"message":"63","line":80,"column":9,"nodeType":"60","messageId":"61","endLine":80,"endColumn":19},{"ruleId":"64","severity":1,"message":"65","line":151,"column":17,"nodeType":"66","endLine":155,"endColumn":14},{"ruleId":"58","severity":1,"message":"67","line":29,"column":64,"nodeType":"60","messageId":"61","endLine":29,"endColumn":68},{"ruleId":"68","severity":1,"message":"69","line":375,"column":20,"nodeType":"66","endLine":381,"endColumn":15},{"ruleId":"58","severity":1,"message":"70","line":33,"column":10,"nodeType":"60","messageId":"61","endLine":33,"endColumn":17},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Conversion' is assigned a value but never used.","'onTabClick' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'Tabs' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'content' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]